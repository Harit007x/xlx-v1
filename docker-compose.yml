services:
  web:
    container_name: web
    restart: always
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    depends_on:
      - db
      - redis
    ports:
      - 3000:3000
      - 5555:5555
    # volumes:
    #   - .:/usr/src/app:rw
    #   - web_node_modules:/usr/src/app/apps/web/node_modules
    command: pnpm run dev:docker
    environment:
      - LOCAL_DB=postgresql://postgres:postgres@db:5432/postgres
    develop:
      watch:
        - action: sync
          path: ./
          target: /usr/src/app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

  test:
    container_name: test
    restart: always
    build:
      context: .
      dockerfile: ./apps/test/Dockerfile
    ports:
      - 8000:8000
    environment:
      - LOCAL_DB=postgresql://postgres:postgres@db:5432/postgres
    # volumes:
    #   - .:/usr/src/app:rw
    #   - test_node_modules:/usr/src/app/apps/test/node_modules
    # command: pnpm run dev:test
    develop:
      watch:
        - action: sync
          path: ./
          target: /usr/src/app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

  db:
    image: postgres:14.12
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    ports:
      - 6379:6379

volumes:
  postgres-data:
    external: false
  # web_node_modules:
  # test_node_modules: