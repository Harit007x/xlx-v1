// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DB")
}

model User {
  id                Int      @id @default(autoincrement())
  username          String   @unique
  password          String
  email             String   @unique
  first_name        String
  last_name         String
  preferences       Preferences?
  session           Session[]       // [] brackets denote a one-to-many relationship
  participants      Participants?   // ? denotes an optional field, meaning it can be null or absent
  Questions         Questions?
}

model Preferences {
  id                Int     @id @default(autoincrement())
  theme             String

  user_id           Int     @unique
  user              User    @relation(fields: [user_id], references: [id])
}     

model Session {
  id                    Int         @id @default(autoincrement())
  name                  String
  schedule_date_time    DateTime    @default(now())
  description           String
  is_auto               Boolean
  invitation_link       String
  password              String
  tags                  Json[]

  user_id           Int     
  user              User    @relation(fields: [user_id], references: [id])

  room_id           Int       
  room              Room      @relation(fields: [room_id], references: [id])
}

model Room {
  id                Int       @id @default(autoincrement())
  room_id           String    @unique
  name              String
  is_chat_paused    Boolean   @default(false)
  is_ind_paused     Boolean   @default(false)

  participants      Participants?
  session           Session[]
  sessionquestions  SessionQuestions?
  Questions         Questions?
}

model Participants {
  id                Int       @id @default(autoincrement())
  rank              Int
  
  user_id           Int       @unique
  user              User      @relation(fields: [user_id], references: [id])

  room_id           Int       @unique
  room              Room      @relation(fields: [room_id], references: [id])
}

model SessionQuestions {
  id                Int       @id @default(autoincrement())
  question          String
  question_type     String
  
  room_id           Int       @unique
  room              Room      @relation(fields: [room_id], references: [id])
}

// - question: string
// - is_question_answered: boolean
// - up_voted_count: int
// - room_id: (fk)
// - user_id: (fk)
// - session_id: (fk)

model Questions {
  id                Int       @id @default(autoincrement())
  question          String
  up_vote_count     Int

  user_id           Int     @unique
  user              User    @relation(fields: [user_id], references: [id])

  room_id           Int       @unique
  room              Room      @relation(fields: [room_id], references: [id])
}