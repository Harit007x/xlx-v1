// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://xlx_owner:n4oK3byeiUEX@ep-sparkling-hill-a1mzqi7d-pooler.ap-southeast-1.aws.neon.tech/xlx?sslmode=require"
}

model User {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  password        String
  email           String            @unique
  first_name      String
  last_name       String
  preferences     Preferences?
  session         Session[] // [] brackets denote a one-to-many relationship
  participants    Participants? // ? denotes an optional field, meaning it can be null or absent
  questions       Questions[]
  sessionmessages SessionMessages[]
  questionaction  QuestionActions[]
}

model Preferences {
  id    Int    @id @default(autoincrement())
  theme String

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id])
}

model Session {
  id                 Int               @id @default(autoincrement())
  name               String
  schedule_date_time DateTime          @default(now())
  description        String
  is_auto            Boolean
  is_finished        Boolean           @default(false)
  invitation_link    String
  meeting_id         String            @unique
  password           String
  tags               Json[]
  sessionmessages    SessionMessages[]
  questions          Questions[]

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  room_id Int
  room    Room @relation(fields: [room_id], references: [id])

  // @@index([user_id])
  // @@index([room_id])
}

model Room {
  id             Int     @id @default(autoincrement())
  name           String
  is_chat_paused Boolean @default(false)
  is_ind_paused  Boolean @default(false)

  participants Participants?
  session      Session[]
}

model Participants {
  id   Int @id @default(autoincrement())
  rank Int

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id])

  room_id Int  @unique
  room    Room @relation(fields: [room_id], references: [id])
}

model SessionMessages {
  id         Int      @id @default(autoincrement())
  message    String
  created_at DateTime @default(now())

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  session_id Int
  session    Session @relation(fields: [session_id], references: [id])

  // @@index([user_id])
  // @@index([room_id])
}

model Questions {
  id              Int      @id @default(autoincrement())
  is_answered     Boolean  @default(false)
  question        String
  up_vote_count   Int
  down_vote_count Int
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())

  questionaction QuestionActions[]

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  session_id Int
  session    Session @relation(fields: [session_id], references: [id])
}

model QuestionActions {
  id            Int      @id @default(autoincrement())
  did_up_vote   Boolean  @default(false)
  did_down_vote Boolean  @default(false)
  created_at    DateTime @default(now())

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  questions_id Int
  question     Questions @relation(fields: [questions_id], references: [id])

  @@unique([user_id, questions_id])
}
